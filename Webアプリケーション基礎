Webアプリケーションの概要

動的　Twitterのように、常に最新のツイートを取得し表示する仕組みや、ユーザーごとで表示されるものが変わるような仕組み
静的　誰がいつ見ても、常に同じ内容が表示されるような仕組み

■ リクエストとレスポンス
HTTP通信　Webアプリケーションを表示する際の、情報やデータなどを送受信するための通信方法
URL　インターネットのサービスの場所を表すもの
リクエスト　データや情報を要求すること
レスポンス　リクエストに対応するデータや情報を返却すること

■ クライアントサイド・サーバーサイド
クライアント　Webアプリケーションなどのサービスを利用する側、つまり様々なWebアプリケーションを使用している人のこと
クライアントサイド　前述のクライアントが利用する領域のこと
サーバー　サーバーは、画面の無いPC
サーバーサイド　実際にWebアプリケーションが存在する領域のこと
データベース　情報の集合体、すなわちデータの集まりのこと

■ サーバーを動かす
Sinatra　RubyによるWebアプリケーションを作成できる仕組みを構築できるフレームワークのこと
requireメソッド　Sinatraのような仕組み自体を読み込む際に使用する記述
ルーティング　リクエストに対してどのような処理を実行するかという道筋を明記する仕組み
HTTPメソッド　HTTP通信における処理の種類のこと、Webアプリケーションで使用する処理の種類ごとに8つの種類が存在する
| メソッド |        処理         |
|   GET    |      取得する       |
|  POST    | 送信する、作成する  |
|  PUT     | 更新する、作成する  |
|  DELETE  |  削除する           |

ローカルホスト ローカルホストとは「自分のPC」という意味

■ Rubyの主要フレームワーク
フレームワーク　最小のコストでWebアプリケーションの作成ができるような仕組み
Ruby on Rails　同じコードを繰り返し書くことを避け、保守管理しやすい状態に保ちバグを減らす。
　　　　　　　　Ruby on Rails自体で規約を用意しているため、規約に則ったコードを書くことで記述量を少なくすることができ、スピーディーな開発が可能。












■名前空間・クラス

名前空間{                           
    クラス{
      メソッド{
           コードブロック{  }
              }
          }
        }

※宣言した変数・関数は、コードブロック内でしか使えない(例外もある)

■配列＋α

値の型の変数：スタックメモリ（自動で生成＆消去）
参照型の変数：ヒープメモリ（自分で管理）

int[] array;                  //宣言したがまだ生成していない
array = new int[3];　　　　　　//インスタンス生成＆メモリ割り当て

int[] array2 = new int[3];　　　//宣言＆生成

fofeach(int a in array) {
     Console.WriteLine(a);
}

出力
0
0
0

解説
int[] array;　→int型のarrayを宣言したがヒープメモリのメモリの割り当てを行っていない状態（NULL参照）
array = new int[3];　→すでに存在している変数に対してint型のインスタンス生成、3つの要素の配列
int[] array2 = new int[3];　→宣言と生成を同時に行っている
※値の型宣言をする時は初期化をしていないとエラーになるが、配列は自分で指定しなくても自動で0が割り当てられる

■拡大・縮小変換、文字・数値変換

拡大・縮小変換
int a =3;
decimal y = a;

Console.WriteLine(y);

decimal Z =3.14m;
int b = (int)z;

Console.WriteLine(b);

出力
3
3

int a =3;
decimal y = a;　→int→decimal型は拡大（情報が増える）ので自動で行える

decimal Z =3.14m;
int b = (int)z;　→decimal→int型は縮小(情報が減る)ので指定が必要

文字・数値変換

int x = 3;
int y = 5;

string s = x.ToString() + y.ToString();

Console.WriteLine(s);

string s1 = "3";
string s2 = "5";

int sum = int.Parse(s1) + int.Parse(s2);

Console.WriteLine(unm);

出力
35
8

解説

int x = 3;
int y = 5;　　→文字に変換したい

string s = x.ToString() + y.ToString();　→~.ToString()により、数値→文字に変換、3と5を連結している

string s1 = "3";
string s2 = "5";　→文字を数字に変換したい

int sum = int.Parse(s1) + int.Parse(s2);　→int.Parse(~)により、文字→数値に変換、3と5を足している








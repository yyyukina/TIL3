■Cコンパイラ
コンパイラ(compiler)とは、プログラミング言語で書かれたプログラムを、
コンピュータが直接実行できる形式のプログラムに変換するソフトウェアのこと。
C言語はコンパイラ言語でC言語で書かれたソースコードはコンパイルしなければ、プログラムを実行することはできない。

■変数
処理を行うために必要なデータを記憶しておく領域に名前をつけたものを意味する
変数を使用するためには変数の宣言をする必要がある
変数の型　変数名;

<C言語での基本的な変数の型>
|   型   |        意味       |
----------------------------
|  char  |        文字       |
|  int   |        整数       |
|  float |浮動小数点数(単精度)|
| double |浮動小数点数(倍精度)|

<命名規則>
1.アルファベット（A〜Z，a〜z）、数字（0〜9）、アンダーバー（_）のみ。すべて半角で、全角は不可。
2.第1文字目は必ずアルファベットまたはアンダーバー。数字で始まる変数名は不可。
3.大文字と小文字は別の文字として扱われる。例えば、linenumberとlineNumberは別の変数となる。
4.if、else、intなどの予約語は使用できない。

<C言語予約語一覧>
auto	double	int	struct
break	else	long	switch
case	enum	register	typedef
char	extern	return	union
const	float	short	unsigned
continue	for	signed	void
default	goto	sizeof	volatile
do	if	static	while

■定数
定数（ていすう、constant）とは、プログラム中で変化することのない一定の値を持つデータのこと
[定数の種類]
1.整数定数
整数定数とは、例えば「100」「12」「398」のような整数の定数です。
型はint型として扱われます。大きすぎてint型に収まらない場合はlong型として扱われます。
整数定数をlong型として扱いたい場合は、「0l」「24L」のように定数の末尾にlまたはLをつけます。
符号なしの型として扱いたい場合は、uまたはUをつけます。unsigned long型として扱いたい場合は、ulまたはULをつけます。

＜C言語のサフィックス一覧＞
|サフィックス（小文字も可）|  	   型      |
------------------------------------------
|          U              |  	unsigned   |
|          L              |   	long     |
|          UL             |	unsigned long|
|          F              |   	float    |

2.浮動小数点定数
浮動小数点定数とは、例えば「3.14」のように小数点のある定数です。
指数部をつけて「314e-2」「0.314e1」のように表現することもできます。
浮動小数点定数の型はdouble型ですが、サフィックスとしてfまたはFをつけるとfloat型になります。
lまたはLをつけるとlong double型として扱われます。

3.文字定数
文字定数とは、例えば「'A'」のようにシングルクォーテーションで囲まれた1文字の定数です。
文字定数の値は、通常、ASCIIコードセットの値になります。
'A'はASCIIコードでは65なので、文字定数'A'の10進表現での値は65になります。
同様に文字定数'0'（数字のゼロ）の値は0ではなく0x30です。

ある種の文字は2文字で1文字を表すことがある
例えば改行は文字定数'¥n'は2文字を使用して表現していますが、実際は改行文字という1文字の文字で、値は10です。

＜エスケープ系列文字の一覧＞
|  文字  |	        意味           |
------------------------------------
|   ¥a   |	    警告（ベル）文字    |
|   ¥b   |	    バックスペース      |
|   ¥f   |    	改ページ            |
|   ¥n   |    	改行                |
|   ¥r   |    	行頭復帰            |
|   ¥t   |     	水平タブ            |
|   ¥v   |	    垂直タブ            |
|   ¥¥   |	    バックスラッシュ    |
|   ¥?   |    	疑問符              |
|   ¥'   |	シングルクォーテーション |
|   ¥"   |	ダブルクォーテーション   |


4.文字列定数
文字列定数とは、例えば「"This is a pen."」のようにダブルクォーテーションで囲まれた文字の列のことです。
「""」も文字列定数で、これは空の文字列を表します。
文字列定数の中に"（ダブルクォーテーション）を入れたい場合は¥"として入れます。
文字定数に使われるエスケープ系列は文字列定数でも使用可能です。

5.列挙定数

6.記号定数

■変数の宣言
C言語で、変数を宣言する位置はブロックの先頭です。ブロックとは{と}で囲まれた部分です。
ブロックの先頭で宣言された変数はローカル変数と呼ばれ、そのブロック内で有効です。
関数の外側の場所でも、変数を定義できます。これをグローバル変数といいます。グローバル変数はプログラム全体で使用可能です。
変数の型 変数名;

char, int, float, doubleの基本型に修飾子をつけることもできます。
int型にはshort, longという修飾子がよく使われます。

[short, longを使った宣言の例]
short int year;
long int population;
(intは省略可能)

多くの処理系では、shortの大きさは2バイトで、longの大きさは4バイト
unsignedという修飾子もよく使われます。この修飾子を使って宣言すると、値をゼロまたは正の数に限定できます。
unsignedはcharとintの宣言時に使用できます。

＜よく使われる型と一般的な値の範囲＞
|       型       |             	範囲                |
-----------------------------------------------------
|      char      |          	-128 〜 127           |
|  unsigned char |             	0 〜 255            |
|      short     |         -32,768 〜 32,767        |
| unsigned short |            	0 〜 65,535         |
|      long      |	-2,147,483,648 〜 2,147,483,647 |
| unsigned long  |	        0 〜 4,294,967,295      |

char型は、処理系によっては0〜255の値をとることもあります。
その時に負の値も持たせたい場合は、signedという修飾子をつけsigned charとして宣言します。

・宣言時の初期化
変数を宣言する時と同時に変数の初期化を行うことができます。
＜宣言時に初期化を行う例＞
unsigned short year = 2000;
unsigned long population = 100000UL;
宣言時に初期化を行うと、ローカル変数が使われている関数やブロックが実行されるたびに、初期化が実行されます。
グローバル変数の場合、宣言時に初期化を行うと、プログラムが実行される前に1回だけ初期化が行われます。

・配列の宣言
配列の宣言は、型に続けて名前と要素数を指定して行います。
＜配列の宣言例＞
char ok_char[10];
int limit[] = {10, 18, 24, 36, 50};
初期化は上記2番目の例のように=と{}を使って行います。この時は要素数を省略できます。
要素数を省略できるのは、初期化で値を指定している時のみです。

■演算子
＜算術演算子と意味＞
| 演算子 | 種別 |   例   |	     意味      |
--------------------------------------------
|   +    | 加算 |  x + y |	xにyを加える。|
|   -    | 減算	|  x - y |  xからyを引く。|
|   *    | 乗算 |  x * y |  xにyをかける。|
|   /    | 除算 |  x / y |  xをyで割る。  |
|   %    | 剰余算| x % y |xをyで割った余りを求める。|

整数の割り算では、小数点以下は切り捨てられます。
被演算数が負の時の切り捨ての方向は機種に依存します。
+と-は同じ優先順位です。*　/　%も同じ優先度で、こちらのグループの方が+と-よりも優先順位が高くなります。

・論理演算子
＜論理演算子と意味＞
|  演算子 |	    種別   	|    例   |          意味          |
------------------------------------------------------------
|   &&    |	論理積（AND）|	 a && b |	aとbが共に真の場合「真」|
|   ||    |	論理和（OR） |	 a || b |	aまたはbが真の場合「真」|
|    !    |	否定（NOT）  |	 !a   |	aが偽の場合「真」、aが真の場合「偽」|

&&と||を使った場合、左側から式が評価され、その評価は全体の真、偽が決定した時点で終わる。

・条件演算子
条件演算子（じょうけんえんざんし、conditional operator）とは、条件によって異なる値を返す演算子のことです
＜条件演算子と意味＞
|   演算子   |	   種別   	|     例   |             	  意味                |
------------------------------------------------------------------------------
|     ? :    |	 条件演算子  | a ? b : c|	aが真ならbが実行、aが偽ならcが実行。|

・比較演算子
＜比較演算子と意味＞
| 演算子 |   一般的な読み  |   例   |      意味      |
-----------------------------------------------------
|   <    |     小なり     | a < b  | aはbより小さい |
|   <=   | 小なりイコール | a <= b |    aはb以下    |
|    >   |     大なり     | a > b  | aはbより大きい |
|   >=   | 大なりイコール | a >= b |    aはb以上    |
|   ==   |    イコール    | a == b | aとbは等しい   |
|   !=   | ノットイコール | a != b |  aとbは異なる  |

・ビット演算子
ビット演算子はビット単位でデータを操作する演算子です。操作できる型は整数（char含む）のみです。
＜ビット演算子と意味＞
|  演算子  |	     種別       |	   例    |    	     意味         |
--------------------------------------------------------------------
|   &      |	ビット毎のAND    | 	a & b  |  aとbのビット単位のAND  |
|   |      |	ビット毎のOR     |  	a | b  | 	aとbのビット単位のOR   |
|   ^      | ビット毎の排他的OR|	  a ^ b  |aとbのビット単位の排他的OR|
|   <<     |	    左シフト     |	a << b |	aをbビット分、左へシフト|
|   >>     |    	右シフト     |	a >> b |	aをbビット分、右へシフト|
|   ~	     | ビット単位の反転	 |    ~a   |	 aの各ビットを反転      |









































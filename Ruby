■ Ruby変数
良い変数名とは変数の中にどんな値が入っているのか誰が見てもわかる名前であること。

[問題1] 以下のプログラムを実行するとエラーが起きます。
①エラーが起きた原因
②正しいソースコード
をそれぞれ答えてください。

実行したプログラム
puts "私の名前は#{name}です。"
name = "テックキャンプ"

[回答]
①エラーが起きた原因
変数を定義する前に変数を使用している
②正しいソースコード
name = "テックキャンプ"
puts "私の名前は#{name}です。"

[問題2] 下記のプログラムを変数を使って書き直してください。
puts "100円のペンの消費税は#{100 * 0.1}円、3000円の本の消費税は#{3000 * 0.1}です。"

[回答]
tax = 0.1
pen = 1000
book = 3000

puts "#{pen}円のペンの消費税は#{pen * tax}円、#{book}円の本の消費税は#{book * tax}です。"

(※pen、bookの変数名をpen_price、book_priceにした方がわかりやすく良い)

[問題3] 国語が80点、英語が50点、数学が70点の場合のテストの平均点をターミナルに出力するプログラムを記述してください。
条件1：このプログラムでは各教科の点数を変数を使って定義してください。
条件2：出力結果は以下のようになるようにコードを書きましょう。
3教科の平均点は、◯点です。

[回答]
japanese_score = 80
english_score = 50
math_score = 70

average = (japanese_score + english_score + math_score) / 3

puts "3教科の平均点は、#{average_score}点です。"

■ Ruby入力と出力

[問題1] 以下の処理を実行するプログラムを書いてください。
処理1：名字をターミナルから入力させる
処理2：名前をターミナルから入力させる
処理3：ターミナルに私の名前は〇〇です。と表示させる。〇〇には処理1と処理2で入力した名字と名前を合わせたフルネームが入る。

[回答]
puts "あなたの名字を入力してください"
family_name = gets.chomp
puts "あなたの名前を入力してください"
first_name = gets.chomp

puts "私の名前は#{family_name + first_name}です。"

■ Ruby情報を順番で管理して1つにまとめる

[問題1] 以下のプログラムを書いてください。
1行目：「イヌ」「キリン」「ライオン」がこの順番で入っている配列を定義する

[回答]　
animals = ["イヌ", "キリン", "ライオン"]
(※変数として定義)

[問題2] 以下のプログラムを書いてください。
1行目：「イヌ」「キリン」「ライオン」がこの順番で入っている配列を定義する
2行目：その配列の最後に「パンダ」を追加する

[回答]
animals = ["イヌ", "キリン", "ライオン"]
animals << "パンダ"
(※配列 << 追加する要素)

[問題3] 以下のプログラムを書いてください。
1行目：「イヌ」「キリン」「ライオン」がこの順番で入っている配列を定義する
2行目： 「イヌ」を「ネコ」に置き換える

[回答]
animals = ["イヌ", "キリン", "ライオン"]
animals[0] = "ネコ"
(※配列[添字] = 値)

■ 複数の値に名前をつけて1つにまとめる

[問題1] 以下のプログラムを書いてください。
1行目：以下の要素を持ったハッシュをuserという変数に入れて定義する
|　キー　|　 値 　|
|　name　| ヤマダ |
|  age   |　 20 　|

[回答]
user = { name: "山田", age: 20 }
(※文字列を使ったキーの記述方法　{ "キーの名前" => 値})

[問題2] 以下のプログラムを書いてください。
1行目：以下の要素を持ったハッシュをuserという変数に入れて定義する
2行目：userのageを22に変更する
3行目：userに新しく以下の情報を追加する

[回答]
user = { name: "山田", age: 20 }
user[:age] = 22
user[:gender] = "男性"
(	※ハッシュ[追加したい値のキー] = 追加したい値)

■ 条件分岐処理

[問題1] ターミナルから数字を入力して、数字に応じて以下のように出力するプログラムを書いてください。
0以下の数値なら0以下の数字です
10以上の数値なら10以上の数字です
1以上9以下の数値なら0より大きく10より小さい数字です

ソースコードは以下の雛形を使ってください。
input = gets.to_i
# ここからソースコードを書いてください

[回答]
input = gets.to_i

if input <= 0
  puts "0以下の数字です"
elsif input >= 10
  puts "10以上の数字です"
else
  puts "0より大きく10より小さい数字です"
end

(※elsifは、elseのように条件式がfalseだったときの処理を記述するものですが、
条件を満たさなかった場合に対して、ifのように条件式を追加できる)

■ 繰り返し処理

[問題1] times文を使って、以下のようにターミナルに出力されるプログラムを書いてください。

ターミナル
1回目の繰り返し
2回目の繰り返し
3回目の繰り返し
4回目の繰り返し
5回目の繰り返し
6回目の繰り返し
7回目の繰り返し
8回目の繰り返し
9回目の繰り返し
10回目の繰り返し

[回答]
10.times do |i|
  puts "#{i + 1}回目の繰り返し"
end

[問題2] 1〜10までの数値を順番に足し合わせて、最後に全て足した結果をターミナルに出力するプログラムを書いてください。
条件：必ずtimes文を使ってください。

[回答]
sum = 0

10.times do |i|
  sum += i + 1
end

puts sum
(※1合計値を保存しておく変数を用意 2変数に1〜10の数値を順番に足していく
3順番に足していく処理をtimes文の繰り返しで置き換える　4変数の値をターミナルに出力 )

■ 処理に名前をつけて使おう

[問題1] 以下のメソッドを作成してください。
メソッド名　introduce
メソッドの処理　私の名前はテックキャンプです。とターミナルに出力する。

[回答]
def introduce
  puts "私の名前はテックキャンプです。"
end

[問題2] 以下のメソッドを作成してください。
メソッド名 double
メソッドの処理 処理1：ターミナルから数値を入力させる
処理2：入力した数値を2倍にした値を戻り値にする

[回答]
def double
  num = gets.to_i
  num * 2
end

■ データの元となる設計図っを作ろう
クラスとインスタンス
クラスは個別の値(データ)を作るための雛形、インスタンスはクラスから作られた個別の値(データ)のこと

[問題1] 以下の情報を「クラスで定義すべき情報」と「インスタンスで定義すべき情報」に分けてください。
1動物という概念
2山田太郎さんという会員
3レシピ投稿サービスに投稿した、オムレツのレシピ

[回答]
クラスで定義すべき情報
1（動物という概念）

インスタンスで定義すべき情報
2.3（山田太郎さんという会員とレシピ投稿サービスに投稿したオムレツのレシピ）

■




































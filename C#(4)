■if文(分岐)
var dice = Random();
int roll =dice.Next(1,7);
Console.WriteLine(roll);

if (roll >= 5)    //if(bool型){ ~ }bool型：TsueもしくはFalse x>y,x,=y,x==y,X!=y
{
   Console.WriteLine("Very higt !!");   //if(True){ 実行される }
}
else if(roll >=3)
{
  Console.WriteLine("So good");    //if(False){ 実行されない }　else{ 実行される }
}
else
{
  Console.WriteLine("Bad...");
}

解説
var　→変数の型を暗黙的に推論するためのキーワードです。変数の型を明示的に宣言する必要がなくなり、コードをより簡潔にすることができます。
if (roll >= 5)　{} →True,Falseで返すのがbool型、diceの出目が5以上の場合Trueで返し{}の中身の"Very higt !!"が実行される
else if(roll >=3) {} →ifでない場合else ifを実行し、diceの中身が3以上の場合Trueで返し{}の中身の"So good"を実行
else　→else ifでもない場合elseを実行しTrueの場合{}の中身の"Bad..."を実行

※if文は()内のbool型によって判断され、Trueだった場合{}内が実行される

else if(roll >=3) →　else if(roll ==3 || roll == 4)この書き方でも同じ意味
|| :OR演算子
&& :AND演算子

■配列
同じ型の要素が連続したメモリ領域に格納されたデータ構造です。

string[] items = new string[3];    //配列宣言　items[0],items[1],items[2]

items[0] = "A123";
items[1] = "B456";
items[2] = "C789";

Console.WriteLine(items[0]);
Console.WriteLine(items[1]);
Console.WriteLine(items[2]);

string[] fluits ={"apple","orenge","pine" };  //配列初期化
Console.WriteLine(fluits[1]);
Console.WriteLine(fluts.Length);　//(fluts.Length)配列の長さを出力するメソッド

出力
A123
B456
C789
orenge
3

解説
string[] items = new string[3];　→string[]データ型の宣言の後に[]をつけ items 変数を定義
                                 →new新しく配列を作り　string[3]3つの要素が入った
                                 →new string[3]をitemsに代入している
　　　　　　　　　　　　　　　　　 →string[] items = new string[3];　配列の宣言では中身はまだ何も入っていない状態
items[0] = "A123";　
items[1] = "B456";
items[2] = "C789";　　　　　　　　→中身を格納

string[] fluits ={"apple","orenge","pine" };　→要素を{}に入れて中身を指定することも可能
Console.WriteLine(fluits[1]);　→２つ目の要素　※配列は0から始まる
Console.WriteLine(fluts.Length);　→配列に要素がいくつ入っているか

■for each文
コレクションや配列などの反復可能な要素に対して順番にアクセスするために使用される制御構造です。
foreach文を使うことで、要素を順番に取り出し、コレクション全体を簡単に反復処理できます。


string[] fluits = { "apple","oremge","pine" };

foreach(string fluit in fluits)
{
   Console.WriteLine(fluit);
}
Console.WriteLine();

for (int i=0; i < fluits.Length; i++)
{
   Console.WriteLine(fluits[i]);
}



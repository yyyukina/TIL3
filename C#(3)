■ライブラリ
C#プログラミング言語で開発されたアプリケーションで使用できる再利用可能なコードや機能のコレクション
特定のタスクや機能を実行するためのコードをカプセル化し、C#プログラムに組み込むことができます。
C#ライブラリは、開発者がアプリケーションを効率的かつ効果的に構築するために使用されます。

※.NETライブラリのSystem.Randomクラスを使用

Random dice = new Random();
int roll = dice.Next(1, 7);
Console.WriteLine(roll);

roll = dice.Next(1, 7);
Console.WriteLine(roll);
roll = dice.Next(1, 7);
Console.WriteLine(roll);
roll = dice.Next(1, 7);
Console.WriteLine(roll);
roll = dice.Next(1, 7);
Console.WriteLine(roll);

出力
3
1
4
5
3

解説
Random dice = new Random();　→インスタンス生成、diceという変数にオブジェクトの参照を格納
int roll = dice.Next(1, 7)　→diceオブジェクトのNext()メソッドを呼び出す
(1, 7)　→1～6までの乱数を出す
Console.WriteLine(roll);　→ConsoleクラスのWriteLine()メソッドで出力

ライブラリとはマイクロソフトが用意した標準のコードや機能のコレクション。
これを使うことによって自分の好きな機能をもってくることができる。
元のライブラリは基本的に編集しないため、dice変数を定義しRandomクラスから新しい(new)コピーを生成する。
コピーにメソッドが使えるようになり、dice.Nextをrollに与えてConsole.WriteLine(roll)でrollを出力する

■続ライブラリ

[ステートレスメソッド]
既にメモリに入っている値を参照しない
Console.WriteLine("Good morning!!"); →この一行で完結する、呼べばすぐに使える

[ステートフルメソッド(インスタンスメソッド)]
メモリ内に入った値を参照し、更新する
Random dice = new Random();　→diceクラスのインスタンス、newメモリ確保、オブジェクト生成　
int roll = dice.Next(1, 7);　→何を参照？RandomメソッドのNextクラスは時刻に基づいて乱数を生成している


■オーバーロード
①引数に様々なデータ型が使える int,string ...②引数の数を選べる
同じ名前のメソッドや演算子を複数のバージョンで定義するプログラミング概念です。
オーバーロードを使用すると、同じ名前のメソッドや演算子を異なるパラメータや引数の型で呼び出すことができます。
C#では、オーバーロードをサポートすることで、コードの可読性を向上させ、同じ名前の操作を行うために異なるデータ型を使用できるようになります。

[引き数]
関数やメソッドに渡すデータや情報のことを指します。
関数やメソッドは、特定のタスクを実行するために引数を使用し、引数に渡された情報に基づいて処理を行います。
[戻り値]
メソッドから戻ってきた値を格納している。
引数を与えて戻り値が返ってくる。

int x = 1;
Console.WriteLine(x);
Console.WriteLine("Good morning!!¥n");

Random rand = new Random();
int rand1 = rand.Next();
int rand2 = rand.Next(100);
int rand3 = rand.Next(90,100);
Console.WriteLine(rand1);
Console.WriteLine(rand2);
Console.WriteLine(rand3);

出力
1
Good morning!!

1800793455
21
98





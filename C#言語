■C＃とは
C#とは、マイクロソフトが開発しているプログラミング言語です。
C++やJavaと同じオブジェクト指向と呼ばれるプログラミング言語で、文法はJavaに似ています。
C#はマイクロソフトが開発しているプログラミング言語なので、Windows向けのアプリケーションの開発に最適です。
(C++をマイクロソフトが改良したもの→C++よりも実用的→使用ジャンルが広い)

■C＃でできること
C#はマイクロソフトが積極的に開発を続けているので、新しいことに次々と対応してできることが増えています。
「Visual Studio」が開発を強力にサポートするため、きれいなGUIのフォームアプリケーションを簡単に作ることができます。
Visual Studioではフォームにボタンなどのコントロールをドラッグアンドドロップで配置するだけで、簡単にフォームアプリケーションを作ることができます
Xamarin(ザマリン)という開発ツールでクロスプラットフォームに対応しました。
これにより、C#でWindowsだけでなく、Mac OS、スマートフォンのiPhone(iOS)やAndroidアプリの開発ができるようになりました。
(アプリ開発:Xamarin  ゲーム開発:Unity,UnirealEngine  Webアプリケーション)

■C＃で作られたサービス
マイクロソフトの公式サイト
Skypeの公式サイト
ポータルサイトのMSN
検索エンジンのBing

■C#入門
環境構築→Visual Studioダウンロード→コンソールアプリ(C#)

clsaa Program                          // C#はclass内で実行される
{
  static void Main(string[] args)     // C#はmain関数で開始・終了
  {
    Console.WriteLine("Hello World!");
  }WriteLine
}

[解説]
Console　→クラス(メソッドを所有)
WriteLine　→一行で書き込み
.　→メンバアクセス演算子
Console.WriteLine　→メソッド(メンバ関数)
() →リテラル文字列(表示させる文章)
; →ステートメント()

■変数宣言
   string newName;　　　　　　　　//変数宣言
   newName = "RYU";              //値を代入
   Console.WriteLine(newName);

   newName = "Ken";             //上書き可能
   Console.WriteLine(newName);

　出力
　Ryu
  Ken

[解説]
string newName →文字列型のnewNameを宣言
newName = "Ryu" →まだ空のnewNameに"RYU"を代入する
Console.WriteLine(newName) →()内を画面に出力
newName = "Ken" →すでに"Ryu"が入っている変数に"Ken"に上書きする
Console.WriteLine(newName) →()内を画面に出力

■データ型
変数を宣言する際の型について

int x = 1;
Console.WriteLine(x);      //整数型
decimal y = 1.23m;
Console.WriteLine(y);      //浮動小数点型
char c = 'a';
Console.WriteLine(c);      //文字型
string s = "aiueo"; 
Console.WriteLine(s);      //文字列型
bool is_ok = true;
Console.WriteLine(is_ok);  //論理型

出力
1
1.23
a
aiueo
True

[解説]
int x = 1; →int型にx(変数)を定義し変数に1(整数)を代入
Console.WriteLine(x);　→xの中身を出力
decimal y = 1.23m;　→decimal型、小数点以下を出力、後にmをつける
Console.WriteLine(y);
char c = 'a';　→char型、文字型(一文字)、’’で囲む
Console.WriteLine(c);　
string s = "aiueo"; 　→string型、文字列、""で囲む
Console.WriteLine(s);
bool is_ok = true;　→bool型、論理型、true・falseで返す
Console.WriteLine(is_ok);

■エスケープ文字
¥\のこと
どちらも意味は同じ

Console.WriteLine("Hello world!");
Console.WriteLine("Hello ¥t world!");   //\t:タブ
Console.WriteLine("Hello ¥n world");　　//\n:改行

Console.WriteLine("c:¥¥dir¥¥repos");　　//\\:\を出力

Console.WriteLine(@"#########　　　　　 //@"~"そのまま出力
Hello
world !!!
#########");
Console.WriteLine(@" ¥t¥n¥¥ ");

出力
Hello world！
Hello  　world！
Hello
 world!
c:¥dir¥repos
#########
Hello
world !!!
#########
 ¥t¥n¥¥

[解説]　
Console.WriteLine("Hello ¥t world!");　→¥tタブ
Console.WriteLine("Hello ¥n world");　→¥n改行
Console.WriteLine("c:¥¥dir¥¥repos");　→¥マークを出力したい時は¥¥二つ並べる
Console.WriteLine(@"#########　　　　　
Hello　　　　　　　　
world !!!
#########");　　　　　　　　　　　　　　→""の前に@をつけることで入力した文字をそのまま出力
Console.WriteLine(@" ¥t¥n¥¥ ");　　　　→@が付いているので改行、タブが使用できず文字そのままが出力される

■文字列連結
文字列や変数を連結させる

string firstName = "Ai";
string message = "Good morning";

Console.WriteLine(message +" "+ firstName);　　//+で結合
Console.WriteLine($"{message} {firstName}");　 //$"{} {}"で結合

string URL = $@"c:\dir\{firstName}\data.txt";
Console.WriteLine(URL);

出力
Good morning Ai
Good morning Ai
c:\dir\Ai\data.txt

[解説]　
Console.WriteLine(message +" "+ firstName);　→+で文字列連結(基本的な連結方法)
Console.WriteLine($"{message} {firstName}");　→$"{} {}"で文字列連結、{}の中に変数を入れる
string URL = $@"c:\dir\{firstName}\data.txt";　→@がついていることでそのまま出力される、この時、${}の中身は変数の値が出力される























































